// Generated by CoffeeScript 1.3.3
(function() {
  var constants,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  constants = this.constants;

  this.Creature = (function() {

    function Creature(world) {
      this.world = world;
      this.update = __bind(this.update, this);

      this.decreaseHunger = __bind(this.decreaseHunger, this);

      this.increaseHunger = __bind(this.increaseHunger, this);

      this.decreaseHappiness = __bind(this.decreaseHappiness, this);

      this.increaseHappiness = __bind(this.increaseHappiness, this);

      this.eat = __bind(this.eat, this);

      this.status = constants.CreatureStatus.neutral;
      this.hunger = constants.maxHunger;
      this.happiness = constants.maxHappiness / 2;
      this.age = 0;
    }

    Creature.prototype.increase = function(attr, value, max) {
      attr += value;
      if (attr > max) {
        attr = max;
      }
      return attr;
    };

    Creature.prototype.decrease = function(attr, value, min) {
      attr -= value;
      if (attr < min) {
        attr = min;
      }
      return attr;
    };

    Creature.prototype.eat = function(value) {
      if (this.hunger + value >= constants.maxHunger) {
        this.decreaseHappiness(20);
      } else {
        this.increaseHappiness(5);
      }
      this.increaseHunger(value);
      return this.world.updateView(this);
    };

    Creature.prototype.increaseHappiness = function(value) {
      this.happiness = this.increase(this.happiness, value, constants.maxHappiness);
      return this.world.updateView(this);
    };

    Creature.prototype.decreaseHappiness = function(value) {
      this.happiness = this.decrease(this.happiness, value, 0);
      return this.world.updateView(this);
    };

    Creature.prototype.increaseHunger = function(value) {
      this.hunger = this.increase(this.hunger, value, constants.maxHunger);
      return this.world.updateView(this);
    };

    Creature.prototype.decreaseHunger = function(value) {
      this.hunger = this.decrease(this.hunger, value, 0);
      return this.world.updateView(this);
    };

    Creature.prototype.update = function() {
      this.decreaseHappiness(0.5);
      return this.decreaseHunger(0.5);
    };

    return Creature;

  })();

}).call(this);
